{"version":3,"sources":["components/FriendCard/index.js","components/Title/index.js","components/Table.js","App.js","service-worker.js","index.js"],"names":["FriendCard","props","console","log","className","alt","name","src","friend","Title","children","Table","columns","data","useState","filterNameInput","setFilterNameInput","filterOccupationInput","setFilterOccupationInput","filterLocationInput","setFilterLocationInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","App","setData","useEffect","friends","useMemo","Header","accessor","Cell","setTable","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"01FAeeA,MAZf,SAAoBC,GAElB,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,Y,MCD1BC,MAJf,SAAeR,GACb,OAAO,wBAAIG,UAAU,SAASH,EAAMS,W,cCDvB,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAEHC,mBAAS,IAFN,mBAE1CC,EAF0C,KAEzBC,EAFyB,OAGSF,mBAAS,IAHlB,mBAG1CG,EAH0C,KAGnBC,EAHmB,OAIKJ,mBAAS,IAJd,mBAI1CK,EAJ0C,KAIrBC,EAJqB,OAe3CC,mBACA,CACFT,UACAC,QAEFS,aACAC,aAZEC,EAT6C,EAS7CA,cACAC,EAV6C,EAU7CA,kBACAC,EAX6C,EAW7CA,aACAC,EAZ6C,EAY7CA,KACAC,EAb6C,EAa7CA,WACAC,EAd6C,EAc7CA,UA+BH,OACC,oCACD,yBAAKzB,UAAU,UAChB,2BACgC0B,MAAOf,EACPgB,SA1BF,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,OAAQC,GAClBd,EAAmBc,IA0BSK,YAAa,gBAE7C,2BACgCL,MAAOb,EACPc,SA5BF,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,aAAcC,GACxBZ,EAAyBY,IA4BGK,YAAa,gBAE7C,2BACgCL,MAAOX,EACPY,SA7BF,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,WAAYC,GACtBV,EAAuBU,IA6BKK,YAAa,qBAG7C,0BAAWX,IACT,+BACSE,EAAaU,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,wCACMA,EAAOC,eAAeD,EAAOE,wBADnC,CAEEtC,UACEoC,EAAOG,SACHH,EAAOI,aACL,YACA,WACF,KAGLJ,EAAOK,OAAO,mBAMzB,0BAAWpB,IACRE,EAAKS,KAAI,SAACU,EAAKC,GAEd,OADAnB,EAAWkB,GAET,uBAAQA,EAAIE,cACTF,EAAIG,MAAMb,KAAI,SAAAc,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKL,OAAO,mB,MC7B/CO,MAhEf,WAAe,IAAD,EAEYtC,mBAAS,IAFrB,mBAELD,EAFK,KAECwC,EAFD,KAKZC,qBAAU,WAEND,EADWE,KAGZ,IAEH,IAAM3C,EAAU4C,mBACd,iBAAM,CACJ,CAEEC,OAAQ,WAER7C,QAAS,CACP,CACE6C,OAAQ,OACRC,SAAU,QAGZ,CACED,OAAQ,OACRC,SAAU,gBAKhB,CAEED,OAAQ,UAER7C,QAAS,CACP,CACE6C,OAAQ,kBACRC,SAAU,YAEZ,CACED,OAAQ,WACRC,SAAU,QACVC,KAAM,gBAAW7B,EAAX,EAAGoB,KAAQpB,MAAX,OAAyB,kBAAC,EAAD,CAAYtB,OAAQsB,WAM3D,IAGA,OACE,yBAAK1B,UAAU,OAEf,kBAAC,EAAD,sBACE,kBAACO,EAAD,CACAC,QAASA,EACTC,KAAMA,EACN+C,SAAUP,MCtDEQ,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASrB,OAAO,kBAAC,EAAD,MAASsB,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.befe1cec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  console.log(props)\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.friend} />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { useState } from \"react\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\nexport default function Table({ columns, data }) {\r\n// Create a state\r\nconst [filterNameInput, setFilterNameInput] = useState(\"\");\r\nconst [filterOccupationInput, setFilterOccupationInput] = useState(\"\");\r\nconst [filterLocationInput, setFilterLocationInput] = useState(\"\");\r\n\r\n\r\n  // Use the useTable Hook to send the columns and data to build the table\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    rows, // rows for the table based on the data passed\r\n    prepareRow, \r\n    setFilter // Prepare the row (this function needs to be called for each row before getting the row props)\r\n  } = useTable(\r\n      {\r\n    columns,\r\n    data\r\n  },\r\n  useFilters,\r\n  useSortBy// This plugin Hook will help to sort our table columns\r\n  );\r\n\r\n  const handleFilterChangeN = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"name\", value);\r\n    setFilterNameInput(value);\r\n  };\r\n  const handleFilterChangeO = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"occupation\", value);\r\n    setFilterOccupationInput(value);\r\n  };\r\n  \r\n  const handleFilterChangeL = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"location\", value);\r\n    setFilterLocationInput(value);\r\n  };\r\n  \r\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\r\n return (\r\n  <>\r\n <div className=\"search\">\r\n<input\r\n                                value={filterNameInput}\r\n                                onChange={\r\n                                    handleFilterChangeN\r\n                                }\r\n                                placeholder={\"Search Name\"}\r\n                              /> \r\n<input\r\n                                value={filterOccupationInput}\r\n                                onChange={\r\n                                    handleFilterChangeO\r\n                                }\r\n                                placeholder={\"Search Role\"}\r\n                              /> \r\n<input\r\n                                value={filterLocationInput}\r\n                                onChange={\r\n                                    handleFilterChangeL\r\n                                }\r\n                                placeholder={\"Search Location\"}\r\n                              />\r\n</div> \r\n<table {...getTableProps()}>\r\n  <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \"sort-desc\"\r\n                        : \"sort-asc\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      </>\r\n  );\r\n}","import React, { useState, useEffect, useMemo} from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport Table from \"./components/Table\";\n\nimport \"./App.css\";\n\nfunction App(){\n\n  const [data, setData] = useState([]);\n\n// Using useEffect to call the json once mounted and set the data\n  useEffect(() => {\n    const data = friends;\n      setData(data);\n\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      {\n        // first group - Employee\n        Header: \"Employee\",\n        // First group columns\n        columns: [\n          {\n            Header: \"Name\",\n            accessor: \"name\"\n   \n          },\n          {\n            Header: \"Role\",\n            accessor: \"occupation\"\n         \n          }\n        ]\n      },\n      {\n        // Second group - Details\n        Header: \"Details\",\n        // Second group columns\n        columns: [\n          {\n            Header: \"Branch Location\",\n            accessor: \"location\",\n          },\n          {\n            Header: \"Headshot\",\n            accessor: \"image\",\n            Cell: ({ cell: { value } }) => <FriendCard friend={value}/>\n          },\n        ]\n      }\n    ],\n    \n    []\n  );\n\n    return (\n      <div className=\"App\">\n    \n      <Title>Employee List</Title>\n        <Table \n        columns={columns} \n        data={data} \n        setTable={setData}/>\n        </div>\n    );\n  }\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}